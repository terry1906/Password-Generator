import sys
import random
import string
import json
import datetime
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel,
    QSpinBox, QCheckBox, QPushButton, QLineEdit, QTextEdit, QTabWidget,
    QFileDialog, QMessageBox, QComboBox, QGroupBox, QTableWidget, QTableWidgetItem,
    QHeaderView, QAction
)
from PyQt6.QtCore import Qt, QSettings, QTimer
from PyQt6.QtGui import QClipboard

# Попытка импортировать zxcvbn для оценки надежности пароля
try:
    from zxcvbn import zxcvbn
    ZXCVBN_AVAILABLE = True
except ImportError:
    ZXCVBN_AVAILABLE = False

# Попытка импортировать Fernet для шифрования
try:
    from cryptography.fernet import Fernet
    CRYPTO_AVAILABLE = True
except ImportError:
    CRYPTO_AVAILABLE = False

# Попытка импортировать keyring для хранения секретов
try:
    import keyring
    KEYRING_AVAILABLE = True
except ImportError:
    KEYRING_AVAILABLE = False


############################################
# Класс для ведения истории (в памяти и через JSON)
############################################
class HistoryManager:
    def __init__(self):
        self.history = []  # Список записей истории

    def add_entry(self, entry):
        entry["timestamp"] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.history.append(entry)

    def remove_entry(self, index):
        if 0 <= index < len(self.history):
            self.history.pop(index)

    def clear_history(self):
        self.history = []

    def import_from_json(self, file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                self.history = json.load(f)
        except Exception as e:
            print("Ошибка импорта истории:", e)

    def export_to_json(self, file_path):
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(self.history, f, indent=4, ensure_ascii=False)
        except Exception as e:
            print("Ошибка экспорта истории:", e)


############################################
# Функции шифрования (если доступна библиотека cryptography)
############################################
def get_encryption_key(settings):
    key = settings.value("encryption_key")
    if key is None:
        if CRYPTO_AVAILABLE:
            key = Fernet.generate_key().decode('utf-8')
            settings.setValue("encryption_key", key)
        else:
            key = ""
    return key.encode('utf-8') if key else None

def encrypt_text(text, fernet):
    if fernet and text:
        return fernet.encrypt(text.encode('utf-8')).decode('utf-8')
    return text

def decrypt_text(token, fernet):
    if fernet and token:
        try:
            return fernet.decrypt(token.encode('utf-8')).decode('utf-8')
        except Exception:
            return token
    return token


############################################
# Виджет генерации паролей
############################################
class PasswordGeneratorWidget(QWidget):
    def __init__(self, history_manager, settings):
        super().__init__()
        self.history_manager = history_manager
        self.settings = settings
        if CRYPTO_AVAILABLE:
            self.fernet = Fernet(get_encryption_key(settings))
        else:
            self.fernet = None
        self.words = ["apple", "orange", "banana", "grape", "peach",
                      "mango", "cherry", "pear", "plum", "kiwi"]
        self.init_ui()
        self.load_settings()

    def init_ui(self):
        main_layout = QVBoxLayout()

        # Группа выбора режима генерации
        mode_group = QGroupBox("Режим генерации пароля")
        mode_layout = QVBoxLayout()
        self.passphrase_checkbox = QCheckBox("Генерировать фраз-пароль (несколько слов)")
        self.passphrase_checkbox.toggled.connect(self.toggle_generation_mode)
        mode_layout.addWidget(self.passphrase_checkbox)

        passphrase_layout = QHBoxLayout()
        passphrase_label = QLabel("Количество слов:")
        self.words_count_spinbox = QSpinBox()
        self.words_count_spinbox.setMinimum(2)
        self.words_count_spinbox.setMaximum(10)
        self.words_count_spinbox.setValue(3)
        self.words_count_spinbox.setEnabled(False)
        passphrase_layout.addWidget(passphrase_label)
        passphrase_layout.addWidget(self.words_count_spinbox)
        mode_layout.addLayout(passphrase_layout)
        mode_group.setLayout(mode_layout)
        main_layout.addWidget(mode_group)

        # Группа настроек для обычного режима генерации
        settings_group = QGroupBox("Настройки генерации пароля")
        settings_layout = QVBoxLayout()

        length_layout = QHBoxLayout()
        length_label = QLabel("Длина пароля:")
        self.length_spinbox = QSpinBox()
        self.length_spinbox.setMinimum(8)
        self.length_spinbox.setMaximum(20)
        self.length_spinbox.setValue(12)
        length_layout.addWidget(length_label)
        length_layout.addWidget(self.length_spinbox)
        settings_layout.addLayout(length_layout)

        self.uppercase_checkbox = QCheckBox("Включать заглавные буквы")
        self.uppercase_checkbox.setChecked(True)
        self.digits_checkbox = QCheckBox("Включать цифры")
        self.digits_checkbox.setChecked(True)
        self.special_checkbox = QCheckBox("Включать специальные символы")
        self.special_checkbox.setChecked(True)
        self.exclude_ambiguous_checkbox = QCheckBox("Исключать неоднозначные символы (I, l, 1, O, 0)")
        self.exclude_ambiguous_checkbox.setChecked(False)

        settings_layout.addWidget(self.uppercase_checkbox)
        settings_layout.addWidget(self.digits_checkbox)
        settings_layout.addWidget(self.special_checkbox)
        settings_layout.addWidget(self.exclude_ambiguous_checkbox)

        # Дополнительные символы для исключения
        custom_exclusion_layout = QHBoxLayout()
        custom_exclusion_label = QLabel("Дополнительные исключения:")
        self.custom_exclusion_lineedit = QLineEdit()
        custom_exclusion_layout.addWidget(custom_exclusion_label)
        custom_exclusion_layout.addWidget(self.custom_exclusion_lineedit)
        settings_layout.addLayout(custom_exclusion_layout)

        settings_group.setLayout(settings_layout)
        main_layout.addWidget(settings_group)

        # Кнопка генерации пароля
        self.generate_button = QPushButton("Генерировать пароль")
        self.generate_button.clicked.connect(self.generate_password)
        main_layout.addWidget(self.generate_button)

        # Поле для отображения сгенерированного пароля
        self.password_lineedit = QLineEdit()
        self.password_lineedit.setReadOnly(True)
        main_layout.addWidget(self.password_lineedit)

        # Метка оценки надежности
        self.strength_label = QLabel("Надежность: ")
        main_layout.addWidget(self.strength_label)

        # Группа для сохранения учетных данных
        credentials_group = QGroupBox("Сохранить учетные данные")
        credentials_layout = QVBoxLayout()

        login_layout = QHBoxLayout()
        login_label = QLabel("Логин:")
        self.login_lineedit = QLineEdit()
        login_layout.addWidget(login_label)
        login_layout.addWidget(self.login_lineedit)
        credentials_layout.addLayout(login_layout)

        service_layout = QHBoxLayout()
        service_label = QLabel("Сервис / Ссылка:")
        self.service_lineedit = QLineEdit()
        service_layout.addWidget(service_label)
        service_layout.addWidget(self.service_lineedit)
        credentials_layout.addLayout(service_layout)

        self.save_credentials_button = QPushButton("Сохранить учетные данные")
        self.save_credentials_button.clicked.connect(self.save_credentials)
        credentials_layout.addWidget(self.save_credentials_button)
        credentials_group.setLayout(credentials_layout)
        main_layout.addWidget(credentials_group)

        # Дополнительные кнопки (копировать пароль и сохранить в файл)
        buttons_layout = QHBoxLayout()
        self.copy_button = QPushButton("Скопировать пароль")
        self.copy_button.clicked.connect(self.copy_password)
        self.save_password_button = QPushButton("Сохранить пароль в файл")
        self.save_password_button.clicked.connect(self.save_password_to_file)
        buttons_layout.addWidget(self.copy_button)
        buttons_layout.addWidget(self.save_password_button)
        main_layout.addLayout(buttons_layout)

        self.setLayout(main_layout)

    def toggle_generation_mode(self, checked):
        if checked:
            # Режим фраз-пароля: отключаем обычные настройки
            self.length_spinbox.setEnabled(False)
            self.uppercase_checkbox.setEnabled(False)
            self.digits_checkbox.setEnabled(False)
            self.special_checkbox.setEnabled(False)
            self.exclude_ambiguous_checkbox.setEnabled(False)
            self.custom_exclusion_lineedit.setEnabled(False)
            self.words_count_spinbox.setEnabled(True)
        else:
            self.length_spinbox.setEnabled(True)
            self.uppercase_checkbox.setEnabled(True)
            self.digits_checkbox.setEnabled(True)
            self.special_checkbox.setEnabled(True)
            self.exclude_ambiguous_checkbox.setEnabled(True)
            self.custom_exclusion_lineedit.setEnabled(True)
            self.words_count_spinbox.setEnabled(False)

    def generate_password(self):
        if self.passphrase_checkbox.isChecked():
            count = self.words_count_spinbox.value()
            password = ' '.join(random.choice(self.words) for _ in range(count))
        else:
            length = self.length_spinbox.value()
            characters = string.ascii_lowercase
            if self.uppercase_checkbox.isChecked():
                characters += string.ascii_uppercase
            if self.digits_checkbox.isChecked():
                characters += string.digits
            if self.special_checkbox.isChecked():
                characters += string.punctuation
            if self.exclude_ambiguous_checkbox.isChecked():
                ambiguous = "Il1O0"
                characters = ''.join(ch for ch in characters if ch not in ambiguous)
            custom_exclusions = self.custom_exclusion_lineedit.text()
            if custom_exclusions:
                characters = ''.join(ch for ch in characters if ch not in custom_exclusions)
            if not characters:
                QMessageBox.warning(self, "Ошибка", "Не выбраны символы для генерации пароля!")
                return
            password = ''.join(random.choice(characters) for _ in range(length))
        self.password_lineedit.setText(password)
        self.evaluate_password_strength(password)
        # Добавляем запись в историю
        self.history_manager.add_entry({"type": "password", "password": password})
        self.save_settings()

    def evaluate_password_strength(self, password):
        if ZXCVBN_AVAILABLE:
            result = zxcvbn(password)
            score = result.get("score", 0)
            strength = ["Очень слабый", "Слабый", "Средний", "Сильный", "Очень сильный"][score]
        else:
            score = 0
            if len(password) >= 8:
                score += 1
            if len(password) >= 12:
                score += 1
            if any(c.isupper() for c in password):
                score += 1
            if any(c.isdigit() for c in password):
                score += 1
            if any(c in string.punctuation for c in password):
                score += 1
            if score <= 2:
                strength = "Слабый"
            elif score == 3:
                strength = "Средний"
            else:
                strength = "Сильный"
        self.strength_label.setText(f"Надежность: {strength}")

    def copy_password(self):
        password = self.password_lineedit.text()
        if password:
            clipboard = QApplication.clipboard()
            clipboard.setText(password)
            QMessageBox.information(self, "Скопировано", "Пароль скопирован в буфер обмена!")
            # Автоматическое удаление через 10 секунд
            QTimer.singleShot(10000, lambda: clipboard.clear())
        else:
            QMessageBox.warning(self, "Ошибка", "Нет пароля для копирования.")

    def save_password_to_file(self):
        password = self.password_lineedit.text()
        if not password:
            QMessageBox.warning(self, "Ошибка", "Нет пароля для сохранения.")
            return
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getSaveFileName(self, "Сохранить пароль", "", "Text Files (*.txt)", options=options)
        if file_path:
            try:
                with open(file_path, 'a', encoding='utf-8') as f:
                    f.write(password + "\n")
                QMessageBox.information(self, "Сохранено", f"Пароль сохранён в файл:\n{file_path}")
            except Exception as e:
                QMessageBox.critical(self, "Ошибка", f"Не удалось сохранить пароль:\n{str(e)}")

    def save_credentials(self):
        login = self.login_lineedit.text().strip()
        service = self.service_lineedit.text().strip()
        password = self.password_lineedit.text().strip()
        if not (login and service and password):
            QMessageBox.warning(self, "Ошибка", "Заполните все поля (логин, сервис, пароль) перед сохранением.")
            return
        # Сохраняем в keyring, если модуль доступен
        if KEYRING_AVAILABLE:
            try:
                keyring.set_password(service, login, password)
                QMessageBox.information(self, "Сохранено", "Учетные данные сохранены в системном хранилище.")
            except Exception as e:
                QMessageBox.warning(self, "Ошибка", f"Не удалось сохранить учетные данные в keyring:\n{str(e)}")
        # Сохраняем в историю с шифрованием (если доступно)
        encrypted_password = encrypt_text(password, self.fernet) if self.fernet else password
        entry = {"type": "credential", "login": login, "password": encrypted_password, "service": service}
        self.history_manager.add_entry(entry)
        QMessageBox.information(self, "Сохранено", "Учетные данные сохранены.")
        # Очистка полей
        self.login_lineedit.clear()
        self.service_lineedit.clear()
        self.password_lineedit.clear()

    def load_settings(self):
        self.length_spinbox.setValue(int(self.settings.value("password_length", 12)))
        self.uppercase_checkbox.setChecked(self.settings.value("include_uppercase", "true") == "true")
        self.digits_checkbox.setChecked(self.settings.value("include_digits", "true") == "true")
        self.special_checkbox.setChecked(self.settings.value("include_special", "true") == "true")
        self.exclude_ambiguous_checkbox.setChecked(self.settings.value("exclude_ambiguous", "false") == "true")
        self.passphrase_checkbox.setChecked(self.settings.value("use_passphrase", "false") == "true")
        self.words_count_spinbox.setValue(int(self.settings.value("words_count", 3)))
        self.custom_exclusion_lineedit.setText(self.settings.value("custom_exclusions", ""))
        self.toggle_generation_mode(self.passphrase_checkbox.isChecked())

    def save_settings(self):
        self.settings.setValue("password_length", self.length_spinbox.value())
        self.settings.setValue("include_uppercase", "true" if self.uppercase_checkbox.isChecked() else "false")
        self.settings.setValue("include_digits", "true" if self.digits_checkbox.isChecked() else "false")
        self.settings.setValue("include_special", "true" if self.special_checkbox.isChecked() else "false")
        self.settings.setValue("exclude_ambiguous", "true" if self.exclude_ambiguous_checkbox.isChecked() else "false")
        self.settings.setValue("use_passphrase", "true" if self.passphrase_checkbox.isChecked() else "false")
        self.settings.setValue("words_count", self.words_count_spinbox.value())
        self.settings.setValue("custom_exclusions", self.custom_exclusion_lineedit.text())


############################################
# Виджет рандомайзера (работает только с числами)
############################################
class NumberRandomizerWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()
        range_layout = QHBoxLayout()
        min_label = QLabel("Минимум:")
        self.min_spinbox = QSpinBox()
        self.min_spinbox.setMinimum(-1000000)
        self.min_spinbox.setMaximum(1000000)
        self.min_spinbox.setValue(0)
        max_label = QLabel("Максимум:")
        self.max_spinbox = QSpinBox()
        self.max_spinbox.setMinimum(-1000000)
        self.max_spinbox.setMaximum(1000000)
        self.max_spinbox.setValue(100)
        range_layout.addWidget(min_label)
        range_layout.addWidget(self.min_spinbox)
        range_layout.addWidget(max_label)
        range_layout.addWidget(self.max_spinbox)
        layout.addLayout(range_layout)
        self.generate_button = QPushButton("Сгенерировать число")
        self.generate_button.clicked.connect(self.generate_number)
        layout.addWidget(self.generate_button)
        self.result_lineedit = QLineEdit()
        self.result_lineedit.setReadOnly(True)
        layout.addWidget(self.result_lineedit)
        self.copy_button = QPushButton("Скопировать результат")
        self.copy_button.clicked.connect(self.copy_result)
        layout.addWidget(self.copy_button)
        self.setLayout(layout)

    def generate_number(self):
        min_val = self.min_spinbox.value()
        max_val = self.max_spinbox.value()
        if min_val > max_val:
            QMessageBox.warning(self, "Ошибка", "Минимальное значение не может быть больше максимального.")
            return
        number = random.randint(min_val, max_val)
        self.result_lineedit.setText(str(number))

    def copy_result(self):
        result = self.result_lineedit.text()
        if result:
            clipboard = QApplication.clipboard()
            clipboard.setText(result)
            QMessageBox.information(self, "Скопировано", "Результат скопирован в буфер обмена!")
            QTimer.singleShot(10000, lambda: clipboard.clear())
        else:
            QMessageBox.warning(self, "Ошибка", "Нет результата для копирования.")


############################################
# Виджет для просмотра и управления историей
############################################
class HistoryWidget(QWidget):
    def __init__(self, history_manager, fernet=None):
        super().__init__()
        self.history_manager = history_manager
        self.fernet = fernet
        self.init_ui()
        self.load_history()

    def init_ui(self):
        layout = QVBoxLayout()
        self.table = QTableWidget(0, 5)
        self.table.setHorizontalHeaderLabels(["Тип", "Логин", "Пароль", "Сервис", "Время"])
        header = self.table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        layout.addWidget(self.table)
        buttons_layout = QHBoxLayout()
        self.delete_button = QPushButton("Удалить выбранное")
        self.delete_button.clicked.connect(self.delete_selected)
        self.clear_button = QPushButton("Очистить историю")
        self.clear_button.clicked.connect(self.clear_history)
        buttons_layout.addWidget(self.delete_button)
        buttons_layout.addWidget(self.clear_button)
        layout.addLayout(buttons_layout)
        self.setLayout(layout)

    def load_history(self):
        self.table.setRowCount(0)
        for entry in self.history_manager.history:
            row = self.table.rowCount()
            self.table.insertRow(row)
            type_item = QTableWidgetItem(entry.get("type", ""))
            login_item = QTableWidgetItem(entry.get("login", ""))
            password_item = QTableWidgetItem(entry.get("password", ""))
            # Если запись – учетные данные и шифрование используется, расшифровываем
            if entry.get("type") == "credential" and self.fernet:
                decrypted = decrypt_text(entry.get("password", ""), self.fernet)
                password_item = QTableWidgetItem(decrypted)
            service_item = QTableWidgetItem(entry.get("service", ""))
            timestamp_item = QTableWidgetItem(entry.get("timestamp", ""))
            self.table.setItem(row, 0, type_item)
            self.table.setItem(row, 1, login_item)
            self.table.setItem(row, 2, password_item)
            self.table.setItem(row, 3, service_item)
            self.table.setItem(row, 4, timestamp_item)

    def delete_selected(self):
        selected = self.table.selectedIndexes()
        if not selected:
            return
        rows = set(index.row() for index in selected)
        for row in sorted(rows, reverse=True):
            self.history_manager.remove_entry(row)
        self.load_history()

    def clear_history(self):
        self.history_manager.clear_history()
        self.load_history()


############################################
# Главное окно с меню и вкладками
############################################
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Генератор паролей и Рандомайзер")
        self.resize(800, 600)
        self.settings = QSettings("MyCompany", "PasswordRandomizerApp")
        self.history_manager = HistoryManager()
        if CRYPTO_AVAILABLE:
            self.fernet = Fernet(get_encryption_key(self.settings))
        else:
            self.fernet = None
        self.init_ui()
        self.create_menus()

    def init_ui(self):
        self.tabs = QTabWidget()
        self.password_generator_tab = PasswordGeneratorWidget(self.history_manager, self.settings)
        self.number_randomizer_tab = NumberRandomizerWidget()
        self.history_tab = HistoryWidget(self.history_manager, self.fernet)
        self.tabs.addTab(self.password_generator_tab, "Генератор паролей")
        self.tabs.addTab(self.number_randomizer_tab, "Рандомайзер (числа)")
        self.tabs.addTab(self.history_tab, "История")
        self.setCentralWidget(self.tabs)

    def create_menus(self):
        menubar = self.menuBar()
        file_menu = menubar.addMenu("Файл")

        import_action = QAction("Импорт истории", self)
        import_action.triggered.connect(self.import_history)
        export_action = QAction("Экспорт истории", self)
        export_action.triggered.connect(self.export_history)
        file_menu.addAction(import_action)
        file_menu.addAction(export_action)

        settings_menu = menubar.addMenu("Настройки")
        language_menu = settings_menu.addMenu("Язык")
        russian_action = QAction("Русский", self)
        english_action = QAction("English", self)
        russian_action.triggered.connect(lambda: self.set_language("ru"))
        english_action.triggered.connect(lambda: self.set_language("en"))
        language_menu.addAction(russian_action)
        language_menu.addAction(english_action)

        help_menu = menubar.addMenu("Справка")
        about_action = QAction("О программе", self)
        about_action.triggered.connect(self.show_help)
        help_menu.addAction(about_action)

    def import_history(self):
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getOpenFileName(self, "Импортировать историю", "", "JSON Files (*.json)", options=options)
        if file_path:
            self.history_manager.import_from_json(file_path)
            self.history_tab.load_history()

    def export_history(self):
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getSaveFileName(self, "Экспортировать историю", "", "JSON Files (*.json)", options=options)
        if file_path:
            self.history_manager.export_to_json(file_path)
            QMessageBox.information(self, "Экспортировано", "История успешно экспортирована.")

    def set_language(self, lang):
        # Заглушка для поддержки многоязычности
        QMessageBox.information(self, "Язык", f"Выбран язык: {lang}. (Функция не реализована полностью.)")

    def show_help(self):
        help_text = (
            "Генератор паролей и Рандомайзер.\n\n"
            "Функционал:\n"
            "- Генерация паролей с расширенными настройками.\n"
            "- Оценка надежности пароля с использованием zxcvbn (если установлено).\n"
            "- Рандомизация числовых данных.\n"
            "- Ведение истории сгенерированных паролей и учетных данных.\n"
            "- Импорт/экспорт истории в JSON.\n"
            "- Автоматическое удаление из буфера обмена через 10 секунд.\n"
            "- Сохранение учетных данных с шифрованием (если установлена библиотека cryptography).\n"
            "- Интеграция с keyring для безопасного хранения учетных данных.\n\n"
            "Дополнительные возможности могут включать:\n"
            "- Полноценную многоязычность с переводом всех элементов интерфейса.\n"
            "- Расширенную настройку безопасности (например, автоматическое блокирование, двухфакторная аутентификация).\n"
            "- Интеграцию с облачными сервисами для резервного копирования настроек и истории.\n"
            "- Более детальную аналитику надежности пароля с подсказками по улучшению.\n"
        )
        QMessageBox.information(self, "О программе", help_text)


def main():
    app = QApplication(sys.argv)
    app.setStyle("Fusion")
    window = MainWindow()
    window.show()
    sys.exit(app.exec())


if __name__ == "__main__":
    main()
